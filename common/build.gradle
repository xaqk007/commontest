apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven'

android {
    compileSdkVersion androidCompileSdkVersion

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            //根据需要 自行选择添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'x86'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64', 'arm64-v8a'
        }

        manifestPlaceholders = [
                MTA_APPKEY:"A573MDUY4LWV",
                MTA_CHANNEL:"android"
        ]

        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            //对齐优化设置为true，否则找不到该task (默认不写也是true)
//            zipAlignEnabled true
//            signingConfig signingConfigs.debug
        }
    }
    flavorDimensions "default"
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            jni.srcDirs = []
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "com.android.support.test:runner:$runnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoCoreVersion"
    api "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    api "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    api "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofitVersion"
    api "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.yanzhenjie:permission:$permissionVersion"
    api 'com.facebook.fresco:fresco:1.9.0'
    api 'com.facebook.fresco:imagepipeline-okhttp3:1.3.0'
    api 'com.facebook.fresco:animated-gif:1.9.0'
    api 'com.umeng.analytics:analytics:6.1.4'
    api 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.1.6'

    api "com.android.support:appcompat-v7:$supportLibraryVersion"
    api "com.android.support:recyclerview-v7:$supportLibraryVersion"

    //添加 Sensors Analytics SDK 依赖
    api 'com.sensorsdata.analytics.android:SensorsAnalyticsSDK:3.0.2'
    api 'com.afollestad.material-dialogs:core:0.9.5.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:$BaseRecyclerViewAdapterHelperVersion"
    implementation "org.greenrobot:eventbus:$eventBusVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation 'com.github.bumptech.glide:glide:4.0.0'
    api "me.yokeyword:fragmentation:$fragmentationVersion"
    implementation 'com.github.LuckSiege.PictureSelector:picture_library:v2.2.3'
}

configurations {
    all*.exclude group: 'com.android.support', module: 'support-v4'
    all*.exclude group: 'com.android.support', module: 'multidex'
}

def isReleaseBuild() {
    return VERSION_NAME.toUpperCase().contains("SNAPSHOT") == false
}
def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}
def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}
def getRepositoryUrl() {
    return isReleaseBuild() ? RELEASE_REPOSITORY_URL : SNAPSHOT_REPOSITORY_URL
}
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
                repository(url: getRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }
    }
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    //解决 JavaDoc 中文注释生成失败的问题
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }
    artifacts {
        archives androidSourcesJar
//        archives androidJavadocsJar
    }
}